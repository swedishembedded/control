#!/bin/bash
# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2022 Martin Schr√∂der <info@swedishembedded.com>
# Consulting: https://swedishembedded.com/go
# Training: https://swedishembedded.com/tag/training

ROOT="$(realpath $(dirname $BASH_SOURCE)/..)"

set -e

print_usage(){
    echo "Usage: $1 -c <commit range> -h -v"
}

# If running on CI then set default commit range to compare
# target branch of MR with tip of current branch
if [[ -v CI_MERGE_REQUEST_TARGET_BRANCH_NAME ]];
then
    git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    COMMIT_RANGE="origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME..HEAD";
else
    COMMIT_RANGE="HEAD~1..HEAD"
fi

VERBOSE=0

# Parse arguments (standard way of doing it in bash)
while [[ $# -gt 0 ]]; do
    case $1 in
    -a|--all)
        COMMIT_RANGE="$(git rev-list HEAD | tail -n 1)..HEAD"
        shift
        ;;
    -c|--commits)
        COMMIT_RANGE="$2"
        shift
        shift
        ;;
    -v|--verbose)
        VERBOSE=1
        shift
        ;;
    -*|--*)
        echo "Unknown option: $1"
        print_usage
        exit 1
        ;;
    -h|--help)
        print_usage
        exit 0
        ;;
    *)
        POS_ARGS+=("$1")
        shift
        ;;
    esac
done

echo -e "Checking COMMIT_RANGE: ${COMMIT_RANGE}"
git log --oneline --graph --decorate --abbrev-commit ${COMMIT_RANGE}
echo -e "---------------------------------------------------"

./scripts/ci/check_compliance.py \
	-e Gitlint \
	-e Identity \
	-e Nits \
	-e Kconfig \
	-e KconfigBasic \
	-c $COMMIT_RANGE || {
	echo "Checking compliance failed"
	echo "Run: ./scripts/fix"
	exit 1
}

check_file_formatting(){
	FILE=$1
	if [[ $FILE == *.py ]]; then
		black -q --check $FILE || {
			echo "Checking formatting of $FILE failed"
			echo "Run: ./scripts/fix"
			return 1
		}
	elif [[ $FILE == *.c ]] ||
		[[ $FILE == *.cpp ]] ||
		[[ $FILE == *.h ]]; then
		clang-format --dry-run --style=file -Werror --fallback-style=none $FILE || {
			echo "Checking formatting of $FILE failed"
			echo "Run: ./scripts/fix"
			return 1
		}
	elif [[ $FILE == */CMakeLists.txt ]] || [[ $FILE == *.cmake ]]; then
		cmake-format --first-comment-is-literal --check $FILE || {
			echo "Checking formatting of $FILE failed"
			echo "Run: ./scripts/fix"
			return 1
		}
	fi
}

# Check file formatting for added and modified files
for FILE in `git diff --name-status $COMMIT_RANGE | grep "^[AM]" | cut -f 2`; do
	check_file_formatting $FILE || {
		exit 1
	}
done

# Check file formatting for added and modified files
for FILE in `git diff --cached --name-status | grep "^[AM]" | cut -f 2`; do
	check_file_formatting $FILE || {
		exit 1
	}
done

# Check file formatting for renamed files
for FILE in `git diff --name-status $COMMIT_RANGE | grep "^[R]" | cut -f 3`; do
	check_file_formatting $FILE || {
		exit 1
	}
done

# Check file formatting for renamed files
for FILE in `git diff --cached --name-status | grep "^[R]" | cut -f 3`; do
	check_file_formatting $FILE || {
		exit 1
	}
done

robot integrity
