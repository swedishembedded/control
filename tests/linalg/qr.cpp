/* SPDX-License-Identifier: MIT */
/*
 * Copyright 2022 Martin Schröder <info@swedishembedded.com>
 * Copyright 2017 Daniel Mårtensson
 * Consulting: https://swedishembedded.com/go
 * Training: https://swedishembedded.com/tag/training
 */

#include <stdio.h>
#include <gtest/gtest.h>

extern "C" {
#include "control/linalg.h"
};

TEST(Main, QRDecomposition)
{
	// clang-format off
	float A[9 * 3] = {
		0.000000000000000000,  0.000000000000000000,  0.035355340689420700,
		0.707106769084930420,  0.000000000000000000,  0.000000000000000000,
		0.000000000000000000,  0.707106828689575200,  0.000000000000000000,
		0.000000000000000000,  0.000000000000000000,  -0.035355340689420700,
		-0.707106769084930420, 0.000000000000000000,  0.000000000000000000,
		0.000000000000000000,  -0.707106828689575200, 0.000000000000000000,
		0.100000001490116120,  0.000000000000000000,  0.000000000000000000,
		0.000000000000000000,  0.100000001490116120,  0.000000000000000000,
		0.000000000000000000,  0.000000000000000000,  0.100000001490116120,
	};

	/* Create Q and R matrices */
	float Q[9 * 9];
	float R[9 * 3];

	float Q_exp[9 * 9] = {
		0.00000 ,  0.00000 , -0.31623 ,  0.22182 ,  0.54752 , -0.38524 , -0.07743 ,  0.05448 , -0.62741,
		-0.70360,   0.00000,   0.00000,  -0.09714,   0.56340,   0.30719,  -0.07968,  -0.04344,   0.27476,
		-0.00000,  -0.70360,   0.00000,   0.13807,  -0.09714,   0.56340,   0.01374,  -0.07968,  -0.39051,
		-0.00000,  -0.00000,   0.31623,   0.91354,   0.06084,  -0.04280,  -0.00860,   0.00605,   0.24456,
		0.70360 ,  0.00000 , -0.00000 , -0.09524 ,  0.57196 ,  0.30117 ,  0.06053 , -0.04259 ,  0.26937,
		-0.00000,   0.70360,   0.00000,   0.13536,  -0.09524,   0.57196,   0.01347,   0.06053,  -0.38285,
		-0.09950,  -0.00000,   0.00000,   0.01347,   0.06053,  -0.04259,   0.99144,   0.00602,  -0.03810,
		-0.00000,  -0.09950,   0.00000,  -0.01914,   0.01347,   0.06053,  -0.00190,   0.99144,   0.05414,
		-0.00000,  -0.00000,  -0.89443,   0.24456,  -0.17207,   0.12107,   0.02433,  -0.01712,   0.30829,
	};
	float R_exp[9 * 3] = {
		-1.00499,   0.00000,   0.00000,
		0.00000 , -1.00499 ,  0.00000,
		0.00000 ,  0.00000 , -0.11180,
		0.00000 ,  0.00000 ,  0.00000,
		0.00000 ,  0.00000 ,  0.00000,
		0.00000 ,  0.00000 ,  0.00000,
		0.00000 ,  0.00000 ,  0.00000,
		0.00000 ,  0.00000 ,  0.00000,
		0.00000 ,  0.00000 ,  0.00000,
	};
	// clang-format on
	/* Q*R = A */
	qr(A, Q, R, 9, 3, false);

	for (unsigned int c = 0; c < 9 * 9; c++) {
		EXPECT_NEAR(Q_exp[c], Q[c], 1e-3);
	}

	for (unsigned int c = 0; c < 9 * 3; c++) {
		EXPECT_NEAR(R_exp[c], R[c], 1e-3);
	}
}
