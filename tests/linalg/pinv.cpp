/* SPDX-License-Identifier: MIT */
/*
 * Copyright 2022 Martin Schröder <info@swedishembedded.com>
 * Copyright 2017 Daniel Mårtensson
 * Consulting: https://swedishembedded.com/go
 * Training: https://swedishembedded.com/tag/training
 */

#include <stdio.h>
#include <gtest/gtest.h>

extern "C" {
#include "control/linalg.h"
};

TEST(Main, PseudoInverse)
{
	// clang-format off
	float A[10 * 5] = {
-0.826584, 1.075993,  -0.069268, -0.146931, 0.185104,
0.040081, 0.135270,  0.339906,  0.098106,  -1.655800,
-0.521739, 0.061760, -0.281359, 1.250549,  -1.595000,
0.575910,	-0.757662, -1.381349, -0.695297, 0.089007,
-0.086319, 1.248045,	-0.547583, -0.202141, 0.880217,
0.829765,  0.569914,  -0.513688, 1.473023,  1.255679,
-0.275721, -0.235370, 0.885980,  0.980984,	0.792136,
-0.734654, 0.832280,  0.802771,  -0.457511, 0.932049,
-0.306556, -1.135363, -0.724773, -0.154853, -1.197430,
-0.716699, -1.085080, 1.056329, 1.011706,  0.439173
	};

	float B[5 * 5] = {
-0.882436, -1.466448, 0.097115,  -0.484182, -0.644157,
0.364987,  0.438386,	 -0.026300, -1.174605, 0.490712,
-0.968832, -0.807293, -1.051890, 0.588022,  -0.013745,
1.544502,  -0.061614, -0.030349, 0.522773,  -1.165337,
-0.448577, 0.367060,	 -0.139004, -0.479703, -0.432461
	};

	float Ai_exp[10 * 5] = {
		-0.3793902,   0.2407267,  -0.2262899,  -0.0623176,  -0.1621149,   0.1905865,  -0.0406281,  -0.1998197,  -0.2867905,  -0.2463033,
		0.1254630 ,  0.1359433 ,  0.0803480 , -0.1546111 ,  0.1438278 ,  0.0776323 , -0.0665492 ,  0.0665385 , -0.1715975 , -0.2164755,
		-0.1812100,   0.2120465,  -0.1801824,  -0.2675115,  -0.1884467,  -0.1131840,   0.0858877,   0.0666839,  -0.2387949,   0.0294597,
		0.0143961 , -0.0039025 ,  0.2432306 , -0.0577203 ,  0.0164118 ,  0.2649868 ,  0.1166096 , -0.0966000 ,  0.0127680 ,  0.1132432,
		0.0315744 , -0.2370369 , -0.1400626 ,  0.0940050 ,  0.0758532 ,  0.0850097 ,  0.0797793 ,  0.0765845 , -0.0104087 ,  0.1123712,
	};

	float Bi_exp[5 * 5] = {
		-0.042626,   0.428762,   0.042808,   0.397156,  -0.521557,
		-0.482626 , -0.212254,  -0.134127,  -0.095165,   0.738736,
		0.263739,  -0.604076 , -0.875336 , -0.314556 , -0.202844,
		-0.264693,  -0.658572,   0.023420,  -0.046927,  -0.227306,
		-0.156588,   0.299785,   0.097131,  -0.339570,  -0.827001,
	};

	// clang-format on
	float Ai[10 * 5];
	float Bi[5 * 5];

	// When row > column
	pinv(Ai, A, 10, 5);

	// When row == column
	pinv(Bi, B, 5, 5);

	for (unsigned int c = 0; c < 10 * 5; c++) {
		EXPECT_NEAR(Ai_exp[c], Ai[c], 1e-3);
	}

	for (unsigned int c = 0; c < 5 * 5; c++) {
		EXPECT_NEAR(Bi_exp[c], Bi[c], 1e-3);
	}
}
